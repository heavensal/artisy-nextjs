// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  avatar        String?

  // admin, pro ou free
  role          String?

  // le user a un profile pro peut-Ãªtre ?
  proProfile    ProProfile?

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  // le pro a des services
  services      Service[]

  // le pro a des skills
  skills        Skill[]

  // le user a des reviews
  reviews       Review[]

  // le pro a des realisations
  realisations  Realisation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProProfile {
  id            String          @id @default(cuid())
  user          User            @relation(fields: [userId], references: [id])
  userId        String          @unique
  profession    String?
  phone         String?
  siret         String?
  presentation  String?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Service {
  id            String          @id @default(cuid())
  name          String?
  description   String?
  price         Float?
  user          User            @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Skill {
  id            String          @id @default(cuid())
  name          String?
  users         User[]
}

model Review {
  id            String          @id @default(cuid())
  rating        Int?
  comment       String?
  user          User            @relation(fields: [userId], references: [id])
  userId        String
  realisation   Realisation     @relation(fields: [realisationId], references: [id])
  realisationId String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Realisation {
  id            String          @id @default(cuid())
  name          String?
  description   String?

  review        Review?
  reviewId      String

  user          User            @relation(fields: [userId], references: [id])
  userId        String

  photos        Photo[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Photo {
  id            String          @id @default(cuid())
  url           String?
  realisation   Realisation     @relation(fields: [realisationId], references: [id])
  realisationId String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
